name: Boost test

on:
  workflow_dispatch:

env: 
  VERSION: 2.0.54
  LINUX_X86_64_SHA: fcd89a12c8d710d45a7f24e4615e930112ee172e76fa0da5ff96e316e8fc4148
  LINUX_ARM64_SHA: 808c7fd9020ecde6b95638795551c52c5a344d9df288ca5a62adb570e17bd2e1
  MACOS_X86_64_SHA: bae3eec3309d4538ef724332db445f15aedf3dfacbbe0880e5c51c332bd61933
  CX_TENANT: ${{ vars.BOOST_CX_TENANT }}
  CX_APIKEY: ${{ secrets.BOOST_CX_APIKEY }}

jobs:
  configureUID:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"
  Scan: 
    runs-on: ubuntu-latest
    needs: configureUID
    container:
      image: m1splacedsoul/chmrx_boost:latest@sha256:e3942c832699b61a5be725bbce26e6565d1c5034ce282f5c92483990fbcf5dea
      options: --user ${{ needs.configureUID.outputs.uid_gid }} 
    steps:
      - name: (0) Stage source code
        uses: actions/checkout@v2
      
      - name: (1) Validate login
        run: | 
          /home/dev/bin/cx auth validate
          
      - name: (2) Run scan
        run: |
          /home/dev/bin/cx scan create --project-name ${{ github.event.repository.name }} -s . --branch main --report-format sarif --output-path /home/dev/output --output-name native_output.json

        # ./cx project list --filter "limit=0" --format json > ./CX_PROJECT_LISTING.json
        # PROJ_ID=$(/go/bin/gojq -r --arg PROJ "${{ github.event.repository.name }}" '.[] | select(.Name==$PROJ) | .ID' ./CX_PROJECT_LISTING.json)

        # ./cx scan list --filter "project-id=${PROJ_ID},status=completed,limit=1" --format json > /home/dev/output/CX_SCAN_LISTING
        # SCAN_ID=$(/go/bin/gojq '.[] | .ID' ./CX_SCAN_LISTING | cut -f 2 -d '"')
        # echo "Scan ID: ${SCAN_ID}"
        # ./cx results show --scan-id ${SCAN_ID} --report-format sarif --output-path ./ --output-name native_output.json
        # cat native_output.json.sarif >> sarif.json
