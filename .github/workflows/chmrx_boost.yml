name: Boost test

on:
  workflow_dispatch:

env: 
  VERSION: 2.0.54
  LINUX_X86_64_SHA: fcd89a12c8d710d45a7f24e4615e930112ee172e76fa0da5ff96e316e8fc4148
  LINUX_ARM64_SHA: 808c7fd9020ecde6b95638795551c52c5a344d9df288ca5a62adb570e17bd2e1
  MACOS_X86_64_SHA: bae3eec3309d4538ef724332db445f15aedf3dfacbbe0880e5c51c332bd61933
  CX_TENANT: ${{ vars.BOOST_CX_TENANT }}
  CX_APIKEY: ${{ secrets.BOOST_CX_APIKEY }}

jobs:
  setup: 
    runs-on: ubuntu-latest
    
    steps: 
    - uses: actions/checkout@v3
    - name: (0) Pull checkmarx cli
      run: |
        BINARY_URL="https://github.com/Checkmarx/ast-cli/releases/download/${VERSION}"
        case "$(uname -sm)" in
          "Linux x86_64")
            BINARY_URL="${BINARY_URL}/ast-cli_${VERSION}_linux_x64.tar.gz"
            SHA="${LINUX_X86_64_SHA} cx.tar.gz"
            ;;
          "Linux arm64")
            BINARY_URL="${BINARY_URL}/ast-cli_${VERSION}_linux_arm64.tar.gz"
            SHA="${LINUX_AMD64_SHA} cx.tar.gz"
            ;;
          "Darwin x86_64")
            BINARY_URL="${BINARY_URL}/ast-cli_${VERSION}_darwin_x64.tar.gz"
            SHA="${MACOS_X86_64_SHA} cx.tar.gz"
            ;;
          *)
            echo "Unsupported machine: ${OPTARG}"
            exit 1
            ;;
        esac

        echo "${BINARY_URL}"
        curl -o cx.tar.gz -fsSL "${BINARY_URL}"
        echo "${SHA}" | sha256sum --check

        tar -zxvf cx.tar.gz cx
        rm cx.tar.gz
        chmod +x cx
        
  scan:
    runs-on: ubuntu-latest
    container: 
      image: m1splacedsoul/chmrx_boost:latest@sha256:f9b903c2efec985f3e7631eb020e543e0e498a0ab0d42ec5a1062223f54c629f
      options: "--user dev --entrypoint /bin/bash"

    steps:
      - name: (3) Acquire project listing
        run: |
          /home/dev/bin/cx project list --filter "limit=0" --format json > /home/dev/output/CX_PROJECT_LISTING.json
          PROJ_ID=$(/go/bin/gojq -r --arg PROJ "$REPO" '.[] | select(.Name==$PROJ) | .ID' CX_PROJECT_LISTING.json)

          /home/dev/bin/cx scan list --filter "project-id=${PROJ_ID},status=completed,limit=1" --format json > CX_SCAN_LISTING
          SCAN_ID=$(/go/bin/gojq '.[] | .ID' /home/dev/output/CX_SCAN_LISTING | cut -f 2 -d '"')
          echo "Scan ID: ${SCAN_ID}"
          /home/dev/bin/cx results show --scan-id ${SCAN_ID} --report-format sarif --output-name /home/dev/output/native_output.json
