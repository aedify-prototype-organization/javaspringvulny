name: Boost test

on:
  workflow_dispatch:

env: 
  CX_TENANT: ${{ vars.BOOST_CX_TENANT }}
  CX_APIKEY: ${{ secrets.BOOST_CX_APIKEY }}

jobs:
  configureuid:
    runs-on: ubuntu-latest
    outputs:
      uid_gid: ${{ steps.get-user.outputs.uid_gid }}
    steps:
      - id: get-user
        run: echo "::set-output name=uid_gid::$(id -u):$(id -g)"
  Scan: 
    runs-on: ubuntu-latest
    needs: configureuid
    container:
      image: m1splacedsoul/chmrx_boost
      options: --user ${{ needs.configureuid.outputs.uid_gid }} 
    steps:
      - name: (0) Stage source code
        uses: actions/checkout@v3
        with:
          path: './src/'
      
      - name: (1) Validate login
        run: | 
          /home/runner/bin/cx auth validate
          
      - name: (2) Run scan
        run: |
          echo `whoami`
          /home/runner/bin/cx scan create --project-name ${{ github.event.repository.name }} -s ./src --branch main --report-format sarif --output-path ./output --output-name native_output.json

          /home/runner/bin/cx project list --filter "limit=0" --format json > ./CX_PROJECT_LISTING.json
          PROJ_ID=$(/go/bin/gojq -r --arg PROJ "${{ github.event.repository.name }}" '.[] | select(.Name==$PROJ) | .ID' ./CX_PROJECT_LISTING.json)

          /home/runner/bin/cx scan list --filter "project-id=${PROJ_ID},status=completed,limit=1" --format json > ./CX_SCAN_LISTING
          SCAN_ID=$(/go/bin/gojq '.[] | .ID' ./CX_SCAN_LISTING | cut -f 2 -d '"')
          echo "Scan ID: ${SCAN_ID}"
          /home/runner/bin/cx results show --scan-id ${SCAN_ID} --report-format sarif --output-path ./ --output-name native_output.json
          cat native_output.json.sarif >> sarif.json
